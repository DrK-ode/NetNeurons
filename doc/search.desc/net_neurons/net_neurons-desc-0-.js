searchState.loadedDescShard("net_neurons", 0, "Wrapper class for CalcNodeCore. This is the struct …\nThe struct that actually holds the data. Only a few member …\nIf we ever want to change to f32, it is easy\nA Layer type that applies a mathematical function to the …\nStandard layer consisting of a matrix of weights and a …\nThis struct is just a stack of Layers with some …\nAll nodes are treated as matrices of shape (rows, columns)\nTensors of higher dimensions than matrices are not …\nObject implementing this trait must supply iterators to …\nA Layer type that only coerces the input into a new shape …\nMostly used for debug output\nIncrements all gradients element-wise with the values …\nRecalculates the gradients of all nodes leading up to the …\nCollapses the CalcNode to a one-hot vector. Only makes …\nReturns a Vec containing the raw float gradient values.\nThe returned CalcNode copies are shallow. The underlying …\nReturns a Vec containing the raw float values.\nDecends the gradient by a fraction of the calculated …\nMultiplies the two objects element-wise.\nExponentiates all values.    \nExports all parameters to a text file.\nCalculates the output given an input.\nForwards the input through all Layers and returns the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a LinearLayer with predetermined weights and …\nReturns the indexed layer. Panics if the index invalid.\nReturns a specific gradient value by index\nImports previously exported parameters. Expect errors if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts all values.\nAll Layers must have a name\nReturns the number of Layers\nReturns the size, i.e., the number of values in the node\nApplies the natural logarithm to all values.    \nCalculates the average loss of the list of (prediction, …\nAll Layers are constructed beforehand and then put into …\nReturns a new instance of a CalcNode containing a …\nShortcut for constructing column vector nodes.\nConstructs a node with a specific shape and values. Will …\nCreates a LinearLayer with random weights and (optional) …\nShortcut for constructing row vector nodes.\nShortcut for constructing scalar nodes.\nReturns the enum NodeType to easily categorize what kind …\nNormalises the CalcNode so that its sum becomes unity.\nApplies the power function to all values.    \nSimilar to CalcNode::new_from_shape but randomizes all …\nResets all gradient values to zero.\nCoerce the node into a new shape. Will panic if the size …\nOverwrites all gradient values with the ones supplied. …\nSets one specific gradient by index.\nUse your own or one of the ones provided in the module …\nSet to <code>Some(float)</code> to punish non-zero parameters.\nOverwrites all values with the ones supplied. Will panic …\nSets one specific value by index.\nThe shape determines what input shapes the layer accepts …\nThe shape determines what input shapes the layer accepts …\nReturns the sum of all values in the CalcNode, i.e., the …\nTrains the network on the supplied training data and …\nReturns a specific value by index\nTakes the prediction as one argument and the truth as the …\nCalculates the sum of the squares of the diviations from …\nAssumes the input can be treated as a probability …\nManages the construction and training of a network that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAfter each linear layer a non-linear FunctionLayer is …\nPlots the colours predicted by the network for a sample of …\nPlots a diagram of log(loss) vs p(learning rate).\nReturns predicted RGB values for the specified coordinates.\nTrains the network for the specified number of cycles. …\nHolds the data consisting of lines of text. Also holds an …\nManages a network that predicts the next character in a …\nAdd extra characters to the set, e.g., sentinels.\nReturns a slice of all currently known characters in the …\nInterprets a CalcNode as a character. The CalcNode is …\nCalls CharSet::decode_char for every CalcNode] in the …\nCreates a matrix where each column is a one-hot vector …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the data from the text file and creates the …\nThe <code>block_size</code> determines how many characters are used to …\nNumber of known characters.\nPredicts the next <code>n_char</code> characters given the starting `…\nTrains the network for the specified number of cycles. …\nReturns a slice of all available training data.\nReturns a slice of all available validation data.")