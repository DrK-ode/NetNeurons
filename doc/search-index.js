var searchIndex = new Map(JSON.parse('[\
["net_neurons",{"t":"CCCFFPIFKFPFIGPKFPPGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNCNNNNNNNNNNNNNNNNNMNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIHHFNNNNNNNNNNNNNNNFPGPPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["nnetwork","recolor","retext","CalcNode","CalcNodeCore","Column","FloatType","FunctionLayer","Layer","LinearLayer","Matrix","MultiLayer","NodeShape","NodeType","None","Parameters","ReshapeLayer","Row","Scalar","VecOrientation","Vector","add","add","add","add","add_grad","back_propagation","back_propagation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collapse","copy_grad","copy_parents","copy_vals","decend_grad","default","deref","div","div","div","div","element_wise_mul","eq","eq","exp","export_parameters","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward","forward","forward","from","from","from","from","from","from","from","from","from_nodes","get_layer","grad","gradient_indexed","import_parameters","into","into","into","into","into","into","into","into","inv","is_empty","layer_name","layer_name","layer_name","layer_name","leaky_relu","len","len","log","loss","loss_functions","mul","mul","mul","mul","neg","neg","new","new","new","new","new_col_vector","new_from_shape","new_rand","new_row_vector","new_scalar","node_type","normalized","param_iter","param_iter","param_iter","param_iter","param_iter","param_iter_mut","param_iter_mut","param_iter_mut","param_iter_mut","param_iter_mut","parents","pow","rand_from_shape","reset_grad","reshape","set_grad","set_gradient_indexed","set_loss_function","set_regularization","set_vals","set_value_indexed","shape","shape","shape","shape","sigmoid","softmax","sub","sub","sub","sub","sum","sum","tanh","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","train","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vals","value_indexed","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","LossFuncType","least_squares","neg_log_likelihood","ReColor","borrow","borrow_mut","export_parameters","from","import_parameters","into","new","plot_predictions","plot_training_progress","predict","train","try_from","try_into","type_id","vzip","CharSet","Creation","DataSetError","DecodingIndex","DecodingVector","Encoding","ReText","add_character","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","characters","characters","decode_char","decode_string","encode","eq","export_parameters","fmt","from","from","from","import_parameters","into","into","into","new","new","number_of_chars","predict","train","training_data","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validation_data","vzip","vzip","vzip"],"q":[[0,"net_neurons"],[3,"net_neurons::nnetwork"],[204,"net_neurons::nnetwork::loss_functions"],[207,"net_neurons::recolor"],[223,"net_neurons::retext"],[271,"net_neurons::nnetwork::calc_node"],[272,"net_neurons::nnetwork::calc_node::types"],[273,"core::ops::function"],[274,"alloc::boxed"],[275,"core::option"],[276,"net_neurons::nnetwork::mlp::layers"],[277,"alloc::vec"],[278,"net_neurons::nnetwork::mlp::multilayer"],[279,"alloc::string"],[280,"std::io::error"],[281,"core::fmt"],[282,"net_neurons::nnetwork::mlp::traits"],[283,"core::result"],[284,"core::iter::traits::iterator"],[285,"net_neurons::nnetwork::mlp::loss_functions"],[286,"core::any"],[287,"net_neurons::recolor::rgb_predictor"],[288,"core::ops::range"],[289,"core::error"],[290,"net_neurons::retext::char_set"],[291,"net_neurons::retext::text_predictor"],[292,"net_neurons::nnetwork::mlp"]],"i":[0,0,0,0,0,13,0,0,0,0,15,0,0,0,15,0,0,13,15,0,15,1,1,1,1,1,1,7,20,23,16,13,15,1,7,11,20,23,16,13,15,1,7,11,1,11,1,11,1,1,1,1,1,7,1,1,1,1,1,1,13,15,1,16,20,23,16,13,15,15,1,11,24,20,23,16,11,20,23,16,13,15,1,7,11,20,16,7,1,16,20,23,16,13,15,1,7,11,1,1,24,20,23,11,11,16,1,1,16,0,1,1,1,1,1,1,23,16,1,11,1,1,20,1,1,1,1,30,20,23,16,11,30,20,23,16,11,7,1,1,1,1,1,1,16,16,1,1,24,24,1,7,11,11,1,1,1,1,1,1,11,1,11,20,23,16,15,1,11,16,20,23,16,13,15,1,7,11,20,23,16,13,15,1,7,11,20,23,16,13,15,1,7,11,7,1,20,23,16,13,15,1,7,11,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,44,0,44,44,44,0,41,41,43,44,41,43,44,41,43,41,41,41,44,43,44,41,43,44,43,41,43,44,41,43,41,43,43,41,41,43,44,41,43,44,41,43,44,41,41,43,44],"f":"`````````````````````{{{d{b}}b}c{}}{{{d{b}}{d{b}}}c{}}{{bb}c{}}{{b{d{b}}}c{}}{{{d{fb}}{d{{j{h}}}}}l}{{{d{fb}}}l}{{{d{n}}}{{d{{Ad{{Ab{A`}}}}}}}}{{{d{c}}}{{d{e}}}{}{}}0000000{{{d{fc}}}{{d{fe}}}{}{}}0000000{{{d{b}}}b}{{{d{Af}}}Af}{{{d{c}}{d{fe}}}l{}{}}02{{{d{b}}}{{Ah{h}}}}{{{d{b}}}{{Ah{b}}}}1{{{d{fb}}h}l}{{}n}{{{d{b}}}{{d{c}}}{}}?=>{{{d{b}}b}c{}}{{{d{b}}{d{b}}}b}{{{d{Aj}}{d{Aj}}}Al}{{{d{An}}{d{An}}}Al};{{{d{B`}}{d{Bb}}}{{Bf{Bd}}}}{{{d{Bh}}{d{fBj}}}Bl}{{{d{Bn}}{d{fBj}}}Bl}{{{d{B`}}{d{fBj}}}Bl}{{{d{Aj}}{d{fBj}}}Bl}{{{d{An}}{d{fBj}}}Bl}0{{{d{b}}{d{fBj}}}Bl}{{{d{Af}}{d{fBj}}}Bl}{{{d{C`}}{d{b}}}b}{{{d{Bh}}{d{b}}}b}{{{d{Bn}}{d{b}}}b}{{{d{B`}}{d{b}}}b}{{{d{Af}}{d{b}}}b}{cc{}}0000000{{b{Ad{b}}{d{Bb}}}Bh}{{{d{B`}}Cb}{{d{C`}}}}{{{d{n}}}{{d{{j{h}}}}}}{{{d{b}}Cb}h}{{{d{fB`}}{d{Bb}}}{{Cf{lCd}}}}{ce{}{}}0000000{{{d{b}}}b}{{{d{b}}}Al}{{{d{C`}}}{{d{Bb}}}}{{{d{Bh}}}{{d{Bb}}}}{{{d{Bn}}}{{d{Bb}}}}{{{d{Af}}}{{d{Bb}}}}5{{{d{B`}}}Cb}{{{d{b}}}Cb}7{{{d{B`}}{d{{j{{Ch{bb}}}}}}}b}`{{b{d{b}}}c{}}{{{d{b}}b}c{}}{{bb}c{}}{{{d{b}}{d{b}}}c{}}{{{d{b}}}c{}}{bc{}}{{Cj{d{Bb}}}Bn}{{{Ah{{Ab{C`}}}}}B`}{{Cj{Ah{h}}{Ah{b}}{Ad{{Ab{A`}}}}}b}{{{d{A`}}{d{Bb}}{d{Bb}}}Af}{{{Ah{h}}}b}{{Cj{Ah{h}}}b}{{CbCbAl{d{Bb}}}Bh}2{hb}{{{d{b}}}An}{{{d{b}}}b}{{{d{Cl}}}{{Ab{Cn}}}}{{{d{Bh}}}{{Ab{Cn}}}}{{{d{Bn}}}{{Ab{Cn}}}}{{{d{B`}}}{{Ab{Cn}}}}{{{d{Af}}}{{Ab{Cn}}}}{{{d{fCl}}}{{Ab{Cn}}}}{{{d{fBh}}}{{Ab{Cn}}}}{{{d{fBn}}}{{Ab{Cn}}}}{{{d{fB`}}}{{Ab{Cn}}}}{{{d{fAf}}}{{Ab{Cn}}}}{{{d{n}}}{{d{{j{b}}}}}}{{{d{b}}{d{b}}}b}{Cjb}{{{d{fb}}}l}{{{d{fb}}Cj}l}{{{d{fb}}{d{{j{h}}}}}l}{{{d{fb}}Cbh}l}{{{d{fB`}}{d{D`}}}l}{{{d{fB`}}{Ad{h}}}l}32{{{d{C`}}}{{Ad{Cj}}}}0{{{d{b}}}Cj}{{{d{n}}}{{d{Cj}}}}{{{d{b}}}b}0{{{d{b}}b}c{}}{{{d{b}}{d{b}}}c{}}{{b{d{b}}}c{}}{{bb}c{}}4{cb{{Cn{}{{Db{b}}}}}}5{{{d{c}}}e{}{}}0{{{d{c}}}Bd{}}00000{{{d{fB`}}{d{{j{{Ch{bb}}}}}}h}h}{c{{Cf{e}}}{}{}}000000000000000{{{d{c}}}Dd{}}0000000{{{d{n}}}{{d{{j{h}}}}}}{{{d{b}}Cb}h}{ce{}{}}0000000`{{{d{b}}{d{b}}}b}0`{{{d{c}}}{{d{e}}}{}{}}{{{d{fc}}}{{d{fe}}}{}{}}{{{d{{Df{c}}}}{d{Bb}}}{{Bf{Bd}}}{{A`{{Ch{hh}}}{{Dh{{Dj{Al}}}}}}}}{cc{}}{{{d{f{Df{c}}}}{d{Bb}}}{{Cf{lCd}}}{{A`{{Ch{hh}}}{{Dh{{Dj{Al}}}}}}}}6{{cCbCb{Ad{h}}}{{Df{c}}}{{A`{{Ch{hh}}}{{Dh{{Dj{Al}}}}}}}}{{{d{{Df{c}}}}{d{{Dl{h}}}}{d{{Dl{h}}}}Dn{d{Bb}}}{{Cf{l{Ab{E`}}}}}{{A`{{Ch{hh}}}{{Dh{{Dj{Al}}}}}}}}{{{d{{Df{c}}}}{d{Bb}}}{{Cf{l{Ab{E`}}}}}{{A`{{Ch{hh}}}{{Dh{{Dj{Al}}}}}}}}{{{d{{Df{c}}}}{Ch{hh}}}{{Dj{h}}}{{A`{{Ch{hh}}}{{Dh{{Dj{Al}}}}}}}}{{{d{f{Df{c}}}}CbCb{Dl{h}}{d{{Dl{h}}}}{d{{Dl{h}}}}Al}{{d{{j{{Ch{hh}}}}}}}{{A`{{Ch{hh}}}{{Dh{{Dj{Al}}}}}}}}??>;```````{{{d{fEb}}Ed}l}:::999{{{d{Eb}}}{{d{{j{Ed}}}}}}{{{d{Ef}}}{{d{{j{Ed}}}}}}{{{d{Eb}}{d{b}}}{{Cf{EdEh}}}}{{{d{Eb}}{d{{j{{d{b}}}}}}}{{Cf{BdEh}}}}{{{d{Eb}}{d{Bb}}}{{Cf{bEh}}}}{{{d{Eh}}{d{Eh}}}Al}{{{d{Ef}}{d{Bb}}}{{Bf{Bd}}}}{{{d{Eh}}{d{fBj}}}Bl}???{{{d{fEf}}{d{Bb}}}{{Cf{lCd}}}}{ce{}{}}00{{{d{Bb}}EjAl}Eb}{{EbCb{Ad{Cb}}CbCb{Ad{h}}}Ef}{{{d{Eb}}}Cb}{{{d{fEf}}{d{Bb}}Cb}{{Cf{BdEh}}}}{{{d{fEf}}CbhCbAl}l}{{{d{Eb}}}{{d{{j{Bd}}}}}}{c{{Cf{e}}}{}{}}00000{{{d{c}}}Dd{}}002888","D":"M`","p":[[5,"CalcNode",3,271],[1,"reference"],[0,"mut"],[8,"FloatType",3,272],[1,"slice"],[1,"unit"],[5,"CalcNodeCore",3,271],[10,"Fn",273],[5,"Box",274],[6,"Option",275],[5,"FunctionLayer",3,276],[5,"Vec",277],[6,"VecOrientation",3,272],[1,"bool"],[6,"NodeType",3,272],[5,"MultiLayer",3,278],[1,"str"],[5,"String",279],[8,"Result",280],[5,"LinearLayer",3,276],[5,"Formatter",281],[8,"Result",281],[5,"ReshapeLayer",3,276],[10,"Layer",3,282],[1,"usize"],[5,"Error",280],[6,"Result",283],[1,"tuple"],[8,"NodeShape",3,272],[10,"Parameters",3,282],[10,"Iterator",284],[8,"LossFuncType",204,285],[17,"Item"],[5,"TypeId",286],[5,"ReColor",207,287],[17,"Output"],[1,"array"],[5,"Range",288],[1,"u32"],[10,"Error",289],[5,"CharSet",223,290],[1,"char"],[5,"ReText",223,291],[6,"DataSetError",223,290],[1,"f32"]],"r":[[3,271],[4,271],[6,272],[7,276],[8,282],[9,276],[11,278],[12,272],[13,272],[15,282],[16,276],[19,272],[109,292],[204,285],[205,285],[206,285],[207,287],[223,290],[225,290],[229,291]],"b":[[21,"impl-Add%3CCalcNode%3E-for-%26CalcNode"],[22,"impl-Add-for-%26CalcNode"],[23,"impl-Add-for-CalcNode"],[24,"impl-Add%3C%26CalcNode%3E-for-CalcNode"],[55,"impl-Div-for-%26CalcNode"],[56,"impl-Div%3C%26CalcNode%3E-for-CalcNode"],[57,"impl-Div-for-CalcNode"],[58,"impl-Div%3CCalcNode%3E-for-%26CalcNode"],[68,"impl-Display-for-NodeType"],[69,"impl-Debug-for-NodeType"],[110,"impl-Mul%3C%26CalcNode%3E-for-CalcNode"],[111,"impl-Mul%3CCalcNode%3E-for-%26CalcNode"],[112,"impl-Mul-for-CalcNode"],[113,"impl-Mul-for-%26CalcNode"],[114,"impl-Neg-for-%26CalcNode"],[115,"impl-Neg-for-CalcNode"],[154,"impl-Sub%3CCalcNode%3E-for-%26CalcNode"],[155,"impl-Sub-for-%26CalcNode"],[156,"impl-Sub%3C%26CalcNode%3E-for-CalcNode"],[157,"impl-Sub-for-CalcNode"],[158,"impl-CalcNode"],[159,"impl-Sum-for-CalcNode"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAKcAIQAAAAMABgAAAAkAAAALAAAADwAAABIAAQAVAAQAHAAUADYABQA9AAEAQQAHAEoAAQBNAAAAWAAAAGQAAABmAAMAbgAHAHgAAACAAAoAlwAHAKAACQCrABgAxQAHANEAAgDVAAAA3AADAOEABADoAAUA7wAAAPMAAgD5AAAAAwEIAA0BAgA="}],\
["rgb_demo",{"t":"H","n":["main"],"q":[[0,"rgb_demo"]],"i":[0],"f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA="}],\
["text_demo",{"t":"H","n":["main"],"q":[[0,"text_demo"]],"i":[0],"f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
